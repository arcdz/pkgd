#name: CI/CD Workflow
#
#on:
#  push:
#    branches:
#      - main
#      - test
#      - dev
#
#jobs:
#  build:
#    runs-on: ubuntu-latest
#
#    strategy:
#      matrix:
#        platform: [linux/amd64, linux/arm64]
#
#    steps:
#      - name: Checkout repository
#        uses: actions/checkout@v3
#
#      - name: Set up JDK
#        uses: actions/setup-java@v3
#        with:
#          distribution: 'temurin' # Sau alta distribuție JDK
#          java-version: '21'
#
#      - name: Set up Docker Buildx
#        uses: docker/setup-buildx-action@v2
#
#      - name: Cache Maven packages
#        uses: actions/cache@v3
#        with:
#          path: ~/.m2
#          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
#          restore-keys: |
#            ${{ runner.os }}-maven
#
#      - name: Build and tag Docker image
#        run: |
#          TAG=""
#          if [[ ${{ github.ref_name }} == "main" ]]; then
#            # Extrage versiunea din pom.xml pentru main branch
#            VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
#            TAG=$VERSION
#          elif [[ ${{ github.ref_name }} == "test" ]]; then
#            # Extrage versiunea și adaugă -rc pentru test branch
#            VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
#            TAG="${VERSION}-rc"
#          else
#            # Fără tag pentru dev branch
#            TAG="dev-latest"
#          fi
#
#          # Construiește imaginea Docker pentru multiple platforme
#          mvn spring-boot:build-image -DskipTests -Ddocker.image.tag=$TAG -Ddocker.publish=true \
#            -Ddocker.platform=linux/amd64,linux/arm64
#
#      - name: Push Docker image to GitHub Container Registry
#        run: |
#          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
#          docker push ghcr.io/${{ github.repository_owner }}/my-app:${TAG}
