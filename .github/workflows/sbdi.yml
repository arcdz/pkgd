name: Spring Boot Docker Image
# Package with GitHub Actions |  maven-plugin | spring-boot:build-Image

# using SEMVER https://semver.org/
on:
  push:
    branches:
      - main
      - test
      - dev
    tags:
      - 'v*'
  pull_request:
    branches:
      - main
      - test
      - dev

env:
  REGISTRY: ghcr.io

jobs:
  docker:
    runs-on: ubuntu-latest
    # Sets the permissions granted to the GITHUB_TOKEN for the actions in this job.
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
    steps:
      # Checkout: https://github.com/marketplace?type=actions:
      - name: Checkout
        uses: actions/checkout@v4

      # Setup JAVA JDK: https://github.com/marketplace/actions/setup-java-jdk
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin' # Alternative: 'zulu'
          java-version: '21'
          cache: 'maven'

      # Docker Metadata action: https://github.com/marketplace/actions/docker-metadata-action
      - name: Extract metadata (tags, labels) for Docker # Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
      # Debugging step: Print meta outputs
      - name: Print Docker tags
        run: |
          echo "${{ steps.meta.outputs.version }}"
          echo "${{ steps.meta.outputs.tags }}"
          VERSION=$(echo '${DOCKER_METADATA_OUTPUT_JSON}' | jq -r '.labels["org.opencontainers.image.version"]')
          echo "Image Version: ${VERSION}"
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
      
      

      # Docker Login: https://github.com/marketplace/actions/docker-login
      - name: Login to GitHub Container Registry
        #  if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Build the project and create Docker image
      - name: Build and Push Docker Image
        run: |
          mvn spring-boot:build-image \
              -DskipTests \
#              -Dspring-boot.build-image.imageName=${{ env.REGISTRY }}/${{ github.repository }}:temp-tag \
#              -Dspring-boot.build-image.tags=stable,latest,${{steps.meta.outputs.tags }} \
#              -Dspring-boot.build-image.build.labels.maintainer="dev@example.com" \
#              -Dspring-boot.build-image.build.labels.description="This is myapp image built with Spring Boot" \
#              -Dspring-boot.build-image.build.labels.version="${{ github.sha }}" \
#              -Dspring-boot.build-image.build.annotations.release="true" \
#              -Dspring-boot.build-image.build.annotations.env="production" \
#              -Dspring-boot.build-image.build.annotations.source="github.com/${{ github.repository }}"
#            mvn spring-boot:build-image \
#            -DskipTests \
#            -Dspring-boot.build-image.imageName=${{ env.REGISTRY }}/${{ github.repository }}:temp-tag \
#            -Dspring-boot.build-image.tags=stable,latest,${{steps.meta.outputs.tags }} \
#            -Dspring-boot.build-image.buildpacks=urn:cnb:builder:paketo-buildpacks/java,urn:cnb:builder:paketo-buildpacks/bellsoft-liberica \
#            -Dspring-boot.build-image.buildpacks.cache=$HOME/.cache/buildpacks \
#            -Dspring-boot.build-image.pullPolicy=IF_NOT_PRESENT \
#            -Dspring-boot.build-image.verbose=true \
#            -Dspring-boot.build-image.builder=paketobuildpacks/builder:base \
#            -Dspring-boot.build-image.runImage=paketobuildpacks/run:tiny \
#            -Dspring-boot.build-image.networkMode=default \
#            -Dspring-boot.build-image.environment.BP_JVM_VERSION=21 \
#            -Dspring-boot.build-image.environment.BP_NATIVE_IMAGE=true \
#            -Dspring-boot.build-image.build.labels.maintainer="dev@example.com" \
#            -Dspring-boot.build-image.build.labels.description="This is myapp image built with Spring Boot" \
#            -Dspring-boot.build-image.build.labels.version="${{ github.sha }}" \
#            -Dspring-boot.build-image.build.annotations.release="true" \
#            -Dspring-boot.build-image.build.annotations.env="production" \
#            -Dspring-boot.build-image.build.annotations.source="github.com/${{ github.repository }}" \
#            -Dspring-boot.build-image.publish=true \
#            -Dspring-boot.build-image.cleanCache=false \
#            -Dspring-boot.build-image.pullTimeout=120000 \
#            -Dspring-boot.build-image.publishRegistry.username="${{ secrets.GH_USERNAME }}" \
#            -Dspring-boot.build-image.publishRegistry.password="${{ secrets.GH_TOKEN }}" \
#            -Dspring-boot.build-image.publishRegistry.url="https://ghcr.io" \
#            -Dspring-boot.build-image.docker.host=tcp://docker:2375 \
#            -Dspring-boot.build-image.docker.timeout=60000 \
#            -Dspring-boot.build-image.docker.configFile=${{ secrets.DOCKER_CONFIG }}
#      # Tag the Docker image with the tags generated by docker/metadata-action
#      - name: Tag Docker image
#        run: |
#          TAGS=$(echo ${{ steps.meta.outputs.tags }} | tr ',' '\n')
#          for TAG in $TAGS; do
#            docker tag ${{ env.REGISTRY }}/${{ github.repository }}:temp-tag ${{ env.REGISTRY }}/$TAG
#          done
#
#      # Push Docker image to GitHub Container Registry
#      - name: Push Docker image
#        run: docker push ${{ env.REGISTRY }}/${{ github.repository }}:${{ env.DOCKER_METADATA_OUTPUT_VERSION }}
